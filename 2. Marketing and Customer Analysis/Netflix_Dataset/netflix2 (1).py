# -*- coding: utf-8 -*-
"""Netflix2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TGhSlViDYB0kAg2wCMF0uU3smxGQs482
"""

from google.colab import drive
drive.mount('/content/drive')

"""Load Libraries"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""Import Dataset"""

Data=pd.read_csv('/content/drive/MyDrive/Data/Netflix-Dataset.csv')
Data.head(2)

"""Getting to Know The Variables"""

Data.info()

Data.describe()

Data.isnull().sum()

Data.shape

Data.size ## columns* rows

Data.columns

"""Missing Values"""

pd.DataFrame(Data.isna().sum(),columns=['Number of Missing Values'])

pd.DataFrame(Data.nunique(), columns=['Number of Unique Values'])

"""Duplicated"""

Data.duplicated().sum()

Data[Data.duplicated()]

"""As it's obvious they aren't duplicate so we keep them!

#Data cleaning

###Correcting The Data Types
"""

Data['Release_Date']=pd.to_datetime(Data['Release_Date'],format='mixed')
Data['Release_Date']
#Data['Release_Date']=pd.to_datetime(Data['Release_Date'],format='ISO8601')

Data['Release_Date'].isnull().sum()

#Data.dropna(subset=['Release_Date'],inplace=True) # Removed Missing values
Data['Release_Date']=Data['Release_Date'].fillna(Data['Release_Date'].mode()[0])

"""###Rating variable"""

Data['Rating'].isnull().sum()

#Data.dropna(subset=['Rating'], inplace=True) # Removed Missing values
Data['Rating']=Data['Rating'].fillna(Data['Rating'].mode()[0])

"""### Filling Missing Values Of Director, Country, Cast Variables"""

Data[['Director', 'Cast', 'Country']]=Data[['Director', 'Cast', 'Country']].fillna('Unknown')

# Recheck Missing values
Data.isna().sum()

"""#Exploratory Data Analysis #1

####Search Movies By Year, Category
"""

def filter_by_Year_Category(Data,Year,Category,n):
  return Data[(Data['Category']==Category) & (Data['Release_Date'].dt.year==Year)][['Title', 'Director', 'Cast', 'Country','Release_Date', 'Rating', 'Duration', 'Type', 'Description']].head(n)

filter_by_Year_Category(Data,2020,"Movie",2)

"""####Search Movies/Series By Country"""

def filter_by_Country(Data,Country,n):
  return Data[(Data['Country']==Country)][['Show_Id', 'Category', 'Title', 'Director', 'Cast', 'Release_Date', 'Rating', 'Duration', 'Type', 'Description']].set_index('Show_Id').head(n)

filter_by_Country(Data,'Egypt',5)

"""####Search Top Directors Based on Most Movies They Have Produced."""

def Top_Directors(Data,n):
  return Data['Director'].value_counts().to_frame().head(n)

Top_Directors(Data,5)

"""####Number Of Movies/Series Released Per Year"""

def Number_of_Movies_per_Year(Data):
  Data['Release_Date']=Data['Release_Date'].dt.year
  return Data['Release_Date'].value_counts().to_frame().sort_index()

Number_of_Movies_per_Year(Data)

"""#### Add the column Number_of_Cast & Search Number of Movies/Series the Cast play in

"""

Data['Cast'].head(2)

list_cast_Number=[]
for i in range(0,Data['Cast'].size):
  cast_Number=len(str(Data['Cast'][i]).split(','))
  list_cast_Number.append(cast_Number)
Data.insert(5,'Number_of_Cast',list_cast_Number)
Data.head(2)

def Count_Work_Cast_play(Data,Name):
  number=0
  for i in range(0,Data['Cast'].size):
    if str(Data['Cast'][i]).split(',').count(Name)==1:
      number+=1
  return number

Count_Work_Cast_play(Data,'David Attenborough')

"""##### Cast Analysis DataFrame"""

#### Not Complete
df_Cast=pd.DataFrame(Data['Cast'])
df_Cast['Cast'] = df_Cast['Cast'].str.split(',') # Split text into a list
df_Cast=df_Cast.explode('Cast') # Convert list into multiple rows
df_Cast = df_Cast.drop_duplicates() # Clean and transform data
df_Cast = df_Cast.reset_index(drop=True)

df_Cast[['First Name', 'Last Name']] = df_Cast['Cast'].str.split(n=1, expand=True)
df_Cast.drop('Cast',axis=1) # Clean data
dups = df_Cast.pivot_table(index = ['First Name', 'Last Name'], aggfunc ='size')
print(dups)